package com.accion.controller;

import com.accion.model.AdvisoryData;
import com.accion.model.CurationData;
import com.accion.model.Response;
import com.accion.service.CurationDataProcess;
import com.accion.service.GeminiService;
import com.accion.service.GitHubService;
import com.accion.service.NVDFetchService;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/fetch")
public class VulnerabilityController {

    @Autowired
    private NVDFetchService service;

    @Autowired
    private GeminiService geminiService;

    @Autowired
    private GitHubService gitHubService;

    @Autowired
    private CurationDataProcess process;


    @GetMapping("/cve/{cveId}")
    public ResponseEntity<Response> getCveDetails(@PathVariable String cveId) {
        Response response = service.getCVEData(cveId);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/advisories/{ghsaId}")
    public ResponseEntity<AdvisoryData> getAdvisories(@PathVariable String ghsaId) {
        AdvisoryData advisories = gitHubService.getAdvisories(ghsaId);
        return new ResponseEntity<AdvisoryData>(advisories, HttpStatus.OK);
    }

    @GetMapping("/curation/{ghsaId}")
    public ResponseEntity<CurationData> getCurationData(@PathVariable String ghsaId) throws Exception {
        CurationData curationData = process.getCurationData(ghsaId);
        geminiService.callApi(curationData);

        return new ResponseEntity<CurationData>(curationData, HttpStatus.OK);
    }

    @GetMapping("/curation")
    public ResponseEntity<List<CurationData>> getCurationDataByValues(@RequestParam("value") String values) throws JsonProcessingException {
        List<String> valueList = Arrays.asList(values.split(","));
        // Process each value to get the curation data
        List<CurationData> curationDataList = valueList.stream()
                .map(value -> {
                    try {
                        return process.getCurationData(value);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                })
                .collect(Collectors.toList());

        // Optionally filter out null values if any exceptions occurred
        curationDataList = curationDataList.stream()
                .filter(data -> data != null)
                .collect(Collectors.toList());

        return new ResponseEntity<>(curationDataList, HttpStatus.OK);
}
}